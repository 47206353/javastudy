<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace该是StudentMapper的完整限定名-->
<mapper namespace="com.ws.ami.first.StudentMapper">
    <!--定义java bean的属性与数据库表的列之间的映射。type="Student"用到了configuration.xml中定义的别名-->
    <resultMap id="studentResultMap" type="Student">
        <!--id映射-->
        <id property="id" column="id"/>
        <!--普通属性映射-->
        <result property="name" column="name"/>
        <result property="gender" column="gender"/>
        <result property="major" column="major"/>
        <result property="grade" column="grade"/>
    </resultMap>
    <!--与StudentMapper接口中的getById方法对应，包括
    方法名和参数类型。SQL语句中以“#{}”的形式引用参数-->
    <select id="getById" parameterType="int" resultMap="studentResultMap">
        SELECT *
        FROM student  WHERE id = #{id}
    </select>
    <!--执行增加操作的SQL语句。id和parameterType
分别与StudentMapper接口中的add方法的名字和
参数类型一致。以#{name}的形式引用Student参数
的name属性，MyBatis将使用反射读取Student参数
的此属性。#{name}中name大小写敏感。引用其他
的gender等属性与此一致。seGeneratedKeys设置
为"true"表明要MyBatis获取由数据库自动生成的主
键；keyProperty="id"指定把获取到的主键值注入
到Student的id属性-->
    <insert id="add" parameterType="Student"
            useGeneratedKeys="true" keyProperty="id">
        insert into student(name,gender,major,grade)
        values(#{name},#{gender},#{major},#{grade})
    </insert>

    <!--执行修改操作的SQL语句。id和parameterType
属性以及“#{}”的形式的含义与上述insert语句一致。-->
    <update id="update" parameterType="Student">
    update student set name=#{name},
    gender=#{gender},
    major=#{major},
    grade=#{grade}
    where id=#
    </update>
</mapper>